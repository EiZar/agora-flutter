"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrepareCommand = void 0;
const command_base_1 = require("./command-base");
const yok_1 = require("../common/yok");
class PrepareCommand extends command_base_1.ValidatePlatformCommandBase {
    constructor($options, $prepareController, $platformValidationService, $projectData, $platformCommandParameter, $platformsDataService, $prepareDataService, $migrateController) {
        super($options, $platformsDataService, $platformValidationService, $projectData);
        this.$prepareController = $prepareController;
        this.$platformCommandParameter = $platformCommandParameter;
        this.$prepareDataService = $prepareDataService;
        this.$migrateController = $migrateController;
        this.allowedParameters = [this.$platformCommandParameter];
        this.dashedOptions = {
            watch: {
                type: "boolean",
                default: false,
                hasSensitiveValue: false,
            },
            hmr: { type: "boolean", default: false, hasSensitiveValue: false },
        };
        this.$projectData.initializeProjectData();
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const platform = args[0];
            const prepareData = this.$prepareDataService.getPrepareData(this.$projectData.projectDir, platform, this.$options);
            yield this.$prepareController.prepare(prepareData);
        });
    }
    canExecute(args) {
        const _super = Object.create(null, {
            canExecuteCommandBase: { get: () => super.canExecuteCommandBase }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const platform = args[0];
            const result = (yield this.$platformCommandParameter.validate(platform)) &&
                (yield this.$platformValidationService.validateOptions(this.$options.provision, this.$options.teamId, this.$projectData, platform));
            if (!this.$options.force) {
                yield this.$migrateController.validate({
                    projectDir: this.$projectData.projectDir,
                    platforms: [platform],
                });
            }
            if (!result) {
                return false;
            }
            const canExecuteOutput = yield _super.canExecuteCommandBase.call(this, platform);
            return canExecuteOutput;
        });
    }
}
exports.PrepareCommand = PrepareCommand;
yok_1.injector.registerCommand("prepare", PrepareCommand);
