"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var shortId = require("shortid");
var nodeBtoa = require("btoa");
var nodeAtob = require("atob");
var md5 = require("js-md5");
var HelpersService = /** @class */ (function () {
    function HelpersService() {
    }
    HelpersService.prototype.getHiddenProperty = function () {
        var prefixes = ['webkit', 'moz', 'ms', 'o'];
        if ('hidden' in document) {
            return 'hidden';
        }
        for (var i = 0; i < prefixes.length; i++) {
            if ((prefixes[i] + 'Hidden') in document)
                return prefixes[i] + 'Hidden';
        }
        return null;
    };
    HelpersService.prototype.isBrowserTabActive = function () {
        if (!this.isBrowser()) {
            // not in browser
            return true;
        }
        var property = this.getHiddenProperty();
        if (!property)
            return true;
        return !document[property];
    };
    HelpersService.prototype.areCaseInsensitiveEqual = function (value1, value2) {
        return (value1 || "").toLowerCase() == (value2 || "").toLowerCase();
    };
    HelpersService.prototype.shortId = function () {
        return shortId.generate();
    };
    HelpersService.prototype.isBrowser = function () {
        return (typeof window !== "undefined");
    };
    HelpersService.prototype.base64Encode = function (input) {
        if (this.isBrowser()) {
            return window.btoa(unescape(encodeURIComponent(input)));
        }
        else {
            return nodeBtoa(unescape(encodeURIComponent(input)));
        }
    };
    HelpersService.prototype.base64Decode = function (input) {
        if (this.isBrowser()) {
            return decodeURIComponent(escape(window.atob(input)));
        }
        else {
            return decodeURIComponent(escape(nodeAtob(input)));
        }
    };
    // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
    HelpersService.prototype.stringToByteArray = function (str, base64Encoded) {
        if (base64Encoded === void 0) { base64Encoded = false; }
        if (base64Encoded === true) {
            var raw = this.isBrowser() ? window.atob(str) : nodeAtob(str);
            var rawLength = raw.length;
            var array = new Uint8Array(new ArrayBuffer(rawLength));
            for (var i = 0; i < rawLength; i++) {
                array[i] = raw.charCodeAt(i);
            }
            return array;
        }
        if (this.isBrowser() && ("TextEncoder" in window)) {
            return new TextEncoder().encode(str);
        }
        var out = [], p = 0;
        for (var i = 0; i < str.length; i++) {
            var c = str.charCodeAt(i);
            if (c < 128) {
                out[p++] = c;
            }
            else if (c < 2048) {
                out[p++] = (c >> 6) | 192;
                out[p++] = (c & 63) | 128;
            }
            else if (((c & 0xFC00) == 0xD800) && (i + 1) < str.length && ((str.charCodeAt(i + 1) & 0xFC00) == 0xDC00)) {
                // Surrogate Pair
                c = 0x10000 + ((c & 0x03FF) << 10) + (str.charCodeAt(++i) & 0x03FF);
                out[p++] = (c >> 18) | 240;
                out[p++] = ((c >> 12) & 63) | 128;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
            else {
                out[p++] = (c >> 12) | 224;
                out[p++] = ((c >> 6) & 63) | 128;
                out[p++] = (c & 63) | 128;
            }
        }
        return new Uint8Array(out);
    };
    HelpersService.prototype.concatenateArrays = function () {
        var arrays = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            arrays[_i] = arguments[_i];
        }
        var totalLength = 0;
        for (var _a = 0, arrays_1 = arrays; _a < arrays_1.length; _a++) {
            var arr = arrays_1[_a];
            totalLength += arr.length;
        }
        var result = new Uint8Array(totalLength);
        var offset = 0;
        for (var _b = 0, arrays_2 = arrays; _b < arrays_2.length; _b++) {
            var arr = arrays_2[_b];
            result.set(arr, offset);
            offset += arr.length;
        }
        return result;
    };
    HelpersService.prototype.calculateMD5 = function (str) {
        return md5(str);
    };
    return HelpersService;
}());
exports.HelpersService = HelpersService;
